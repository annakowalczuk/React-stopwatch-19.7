{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getInitialState","time","minutes","seconds","miliseconds","running","renderStopwatch","state","react_default","a","createElement","concat","pad0","Math","floor","setState","_this2","watch","setInterval","step","clearInterval","calculate","newTime","_this3","className","id","onClick","start","stop","reset","Component","value","result","toString","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,gBAAkB,WAShB,MARqB,CACnBC,KAAM,CACJC,QAAS,EACTC,QAAS,EACTC,YAAa,GAEfC,SAAS,IAZMZ,EAwDnBa,gBAAkB,WAAM,IACfL,EAAQR,EAAKc,MAAbN,KACP,OACAO,EAAAC,EAAAC,cAAA,cAAAC,OACMC,EAAKX,EAAKC,SADhB,KAAAS,OAC4BC,EAAKX,EAAKE,SADtC,KAAAQ,OACkDC,EAAKC,KAAKC,MAAMb,EAAKG,iBA1DvEX,EAAKc,MAAQd,EAAKO,kBAFDP,uEAkBjBG,KAAKmB,SAASnB,KAAKI,mDAGb,IAAAgB,EAAApB,KACDA,KAAKW,MAAMF,UACdT,KAAKmB,SAAS,CAACV,SAAS,IACxBT,KAAKqB,MAAQC,YAAY,kBAAMF,EAAKG,QAAQ,oCAK9CvB,KAAKmB,SAAS,CAACV,SAAS,IACxBe,cAAcxB,KAAKqB,sCAIfrB,KAAKW,MAAMF,SACfT,KAAKyB,gDAIK,IAGJC,EAFS1B,KAAKW,MAAbN,KAGPqB,EAAQlB,aAAe,EACnBkB,EAAQlB,aAAe,MACzBkB,EAAQnB,SAAW,EACnBmB,EAAQlB,YAAc,GAEpBkB,EAAQnB,SAAW,KACrBmB,EAAQpB,SAAW,EACnBoB,EAAQnB,QAAU,GAGpBP,KAAKmB,SAAS,CAACd,KAAMqB,qCAYd,IAAAC,EAAA3B,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,YACbhB,EAAAC,EAAAC,cAAA,UACEc,UAAU,SACVC,GAAG,QACHC,QAAS,kBAAMH,EAAKI,UAHtB,SAKAnB,EAAAC,EAAAC,cAAA,UACEc,UAAU,SACVC,GAAG,OACHC,QAAS,kBAAMH,EAAKK,SAHtB,QAIApB,EAAAC,EAAAC,cAAA,UACEc,UAAU,SACVC,GAAG,QACHC,QAAS,kBAAMH,EAAKM,UAHtB,UAKFrB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aAAc5B,KAAKU,mBAClCE,EAAAC,EAAAC,cAAA,MAAIc,UAAU,oBArFJM,cA2FZlB,EAAO,SAACmB,GACZ,IAAIC,EAASD,EAAME,WAInB,OAHID,EAAOE,OAAS,IAClBF,EAAS,IAAMA,GAEVA,GAGMzC,IC1FK4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d6b0f1d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n\n  getInitialState = () => {\n    const initialState = {\n      time: {\n        minutes: 0,\n        seconds: 0,\n        miliseconds: 0,\n      },\n      running: false,\n    };\n    return initialState;\n  }\n\n  reset() {\n    this.setState(this.getInitialState());\n  }\n\n  start() {\n    if (!this.state.running) {\n      this.setState({running: true});\n      this.watch = setInterval(() => this.step(), 10);\n    }\n  }\n\n  stop() {\n    this.setState({running: false});\n    clearInterval(this.watch);\n  }\n\n  step() {\n    if (this.state.running) {\n    this.calculate();\n    }\n  }\n\n  calculate() {\n    const {time} = this.state;\n\n    const newTime = time;\n    newTime.miliseconds += 1;\n    if (newTime.miliseconds >= 100) { //milisekund w sekundzie jest tysiąc, interwał wykonuje się co 10ms, należy podzielić 1000 przez 10\n      newTime.seconds += 1;\n      newTime.miliseconds = 0;\n    }\n    if (newTime.seconds >= 60) {\n      newTime.minutes += 1;\n      newTime.seconds = 0;\n    }\n\n    this.setState({time: newTime});\n  }\n\n  renderStopwatch = () => {\n    const {time} = this.state;\n    return (\n    <div>\n      {`${pad0(time.minutes)}:${pad0(time.seconds)}:${pad0(Math.floor(time.miliseconds))}`}\n    </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"controls\">\n          <button \n            className=\"button\"\n            id=\"start\"\n            onClick={() => this.start()}>\n            Start</button>\n          <button\n            className=\"button\"\n            id=\"stop\"\n            onClick={() => this.stop()}>Stop</button>\n          <button\n            className=\"button\"\n            id=\"reset\"\n            onClick={() => this.reset()}>Reset</button>\n        </nav>\n        <div className=\"stopwatch\" >{this.renderStopwatch()}</div>\n        <ul className=\"results\"></ul>\n      </div>\n    );\n  }\n}\n\nconst pad0 = (value) => {\n  let result = value.toString();\n  if (result.length < 2) {\n    result = '0' + result;\n  }\n  return result;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}